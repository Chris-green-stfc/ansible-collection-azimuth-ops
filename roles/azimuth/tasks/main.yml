---

- name: Create Azimuth release namespace
  command: kubectl create namespace {{ azimuth_release_namespace }}
  register: azimuth_create_namespace
  changed_when: azimuth_create_namespace.rc == 0
  failed_when: >-
    azimuth_create_namespace.rc != 0 and
    'AlreadyExists' not in azimuth_create_namespace.stderr

- name: Install wildcard TLS certificate
  command: kubectl apply -f -
  args:
    stdin: "{{ azimuth_ingress_tls_wildcard_secret_definition | to_nice_yaml }}"
  vars:
    azimuth_ingress_tls_wildcard_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ azimuth_ingress_tls_secret_name }}"
        namespace: "{{ azimuth_release_namespace }}"
      type: kubernetes.io/tls
      stringData:
        tls.crt: "{{ azimuth_ingress_tls_certificate }}"
        tls.key: "{{ azimuth_ingress_tls_key }}"
  when: azimuth_ingress_tls_certificate

- name: Install trust bundle
  command: kubectl apply -f -
  args:
    stdin: "{{ azimuth_trust_bundle_configmap_definition | to_nice_yaml }}"
  vars:
    azimuth_trust_bundle_configmap_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ azimuth_trust_bundle_configmap_name }}"
        namespace: "{{ azimuth_release_namespace }}"
      data:
        ca-certificates.crt: "{{ azimuth_trust_bundle }}"
  when: azimuth_trust_bundle

- name: Install Azimuth on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ azimuth_chart_name }}"
    chart_repo_url: "{{ azimuth_chart_repo }}"
    chart_version: "{{ azimuth_chart_version }}"
    release_namespace: "{{ azimuth_release_namespace }}"
    release_name: "{{ azimuth_release_name }}"
    release_values: "{{ azimuth_release_values }}"
    atomic: yes
    create_namespace: yes
    wait: yes
    wait_timeout: "{{ azimuth_wait_timeout }}"

- name: Configure custom Azimuth alerting rules
  command: kubectl apply -f -
  args:
    stdin: "{{ azimuth_alert_rules_definition | to_nice_yaml }}"
  vars:
    azimuth_alert_rules_definition:
      apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        name: azimuth-alerting-rules
        namespace:  "{{ azimuth_release_namespace }}"
        labels:
          release: kube-prometheus-stack
      spec:
        groups:
        - name: azimuth.rules
          rules:
            - alert: AzimuthHighErrorResponsePercentage
              expr: |
                ((count(gunicorn_response_code{app="azimuth-api", status=~"(402|40[5-9]|4[1-9][0-9]|5[0-9][0-9])"}) / count(gunicorn_response_code{app="azimuth-api"})) * 100) > 5
              for: 1h
              annotations:
                message: '{% raw %}The Azimuth API is returning a high percentage ({{ printf "%.2f" $value }}%) of 4xx and 5xx response codes.{% endraw %}'
              labels:
                severity: warning

- block:
    - debug:
        msg: "Azimuth UI available at {{ scheme }}://{{ host }}"

    - name: Write Azimuth URL to env file on localhost
      local_action:
        module: ansible.builtin.copy
        content: >-
          AZIMUTH_URL="{{ scheme }}://{{ host }}"
        dest: "{{ azimuth_url_envfile }}"
      when: azimuth_url_envfile != ""
      vars:
        azimuth_url_envfile: "{{ lookup('env', 'AZIMUTH_URL_ENVFILE') }}"
  vars:
    scheme: "{{ 'https' if azimuth_ingress_tls_enabled else 'http' }}"
    host: "{{ azimuth_ingress_host }}"