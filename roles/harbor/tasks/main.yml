---

- name: Create Harbor release namespace
  command: kubectl create namespace {{ harbor_release_namespace }}
  register: harbor_create_namespace
  changed_when: harbor_create_namespace.rc == 0
  failed_when: >-
    harbor_create_namespace.rc != 0 and
    'AlreadyExists' not in harbor_create_namespace.stderr

- name: Install wildcard TLS certificate
  command: kubectl apply -f -
  args:
    stdin: "{{ harbor_tls_wildcard_secret_definition | to_nice_yaml }}"
  vars:
    harbor_tls_wildcard_secret_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ harbor_tls_secret_name }}"
        namespace: "{{ harbor_release_namespace }}"
      type: kubernetes.io/tls
      stringData:
        tls.crt: "{{ harbor_tls_wildcard_certificate }}"
        tls.key: "{{ harbor_tls_wildcard_key }}"
  when: harbor_tls_wildcard_certificate

- name: Install Harbor on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ harbor_chart_name }}"
    chart_repo_url: "{{ harbor_chart_repo }}"
    chart_version: "{{ harbor_chart_version }}"
    release_namespace: "{{ harbor_release_namespace }}"
    release_name: "{{ harbor_release_name }}"
    release_values: "{{ harbor_release_values }}"
    atomic: yes
    create_namespace: yes
    wait: yes
    wait_timeout: "{{ harbor_wait_timeout }}"

- name: Wait for Harbor API to become available
  uri:
    url: "{{ harbor_external_url }}/api/v2.0/projects"
    method: GET
    user: admin
    password: "{{ harbor_admin_password }}"
    force_basic_auth: yes
    timeout: 5
    ca_path: "{{ harbor_ca_path or omit }}"
    validate_certs: "{{ harbor_validate_certs }}"
  register: harbor_api_available
  until: harbor_api_available is succeeded
  retries: 60
  delay: 10
  

- name: Create proxy cache projects
  include_tasks: proxy_cache_project.yaml
  loop: "{{ harbor_proxy_cache_projects.values() }}"
  loop_control:
    loop_var: project
    label: "{{ project.name }}"

- name: Set registry mirrors fact
  set_fact:
    harbor_registry_mirrors: >-
      {
        {% for registry, project in harbor_proxy_cache_projects.items() %}
        "{{ registry }}": ["{{ "{}/v2/{}".format(harbor_external_url, project.name) }}"],
        {% endfor %}
      }

- block:

  - name: Ensure kubernetes python client is available
    ansible.builtin.pip:
      state: present
      name: kubernetes

  - name: Ensure ConfigMap containing Grafana dashboard is present
    kubernetes.core.k8s:
        kubeconfig: ~/.kube/config
        state: present
        definition:
          kind: ConfigMap
          metadata:
            labels:
              grafana_dashboard: "1"
              release: kube-prometheus-stack
            name: harbor-grafana-dashboard
            namespace: harbor
          data:
            harbor_dashboard.json:
              "{{ lookup('file', 'grafana_dashboard.json' ) | from_json | to_nice_json }}"

  when: azimuth_management_cluster_monitoring_enabled